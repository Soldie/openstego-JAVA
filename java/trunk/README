OpenStego v0.4.1
================

OpenStego is a tool developed in Java for steganography. It supports
optional encryption of data before embedding in the image.

Plugins for different steganographic algorithms are supported. By default,
one algorithm (Least Significant Bit of Images) is provided. Support for other
algorithms like DCT, FFT, etc. can be added using plugins.

USAGE:
------

For GUI:
  java -jar <path>\openstego.jar

For command line interface:
  java -jar <path>\openstego.jar <command> [options]

The first argument must be a command. Valid commands are:

  embed, --embed                Embed message into cover file
  extract, --extract            Extract message from stego file
  algorithms, --algorithms      List down supported steganography algorithms
  readformats --readformats     List down supported formats for cover file
  writeformats, --writeformats  List down supported formats for stego file
  help, --help                  Display this help. To get help on options
                                specific to an algorithm, provide the name
                                of the algorithm using '-a' option

Following option is common for all commands other than 'algorithms':

    -a, --algorithm <algorithm_name>
        Name of the steganography algorithm to use. List of the supported
        algorithms can be retrieved using 'algorithms' command. For all
        commands except 'extract', if this option is not provided, then
        default algorithm (LSB) is used, whereas for 'extract' command if this
        option is not provided then the algorithm is chosen automatically
        based on the stego file provided

'embed' options:

    -mf, --messagefile <filename>
        Source message/data file. If this option is not provided or '-'
        (without quotes) is provided as the value then the message data is
        read from stdin

    -cf, --coverfile <filename>
        Cover file in which the message will be embedded. This option supports
        '*' and '?' wildcards for filename. If wildcard filename is provided
        then make sure that it is surrounded by double quotes.
        Multiple filenames can also be provided by separating them with ';'
        (semi-colon).
        If the wildcard expression returns more than one file, then '-sf'
        option is ignored, and each coverfile is overwritten with the
        corresponding generated stegofile

    -sf, --stegofile <filename>
        Output stego file containing the embedded message. If this option is
        not provided or '-' (without quotes) is provided as the value then the
        stego file is written to stdout

    -c, --compress
        Compress the message file before embedding (default)

    -C, --nocompress
        Do not compress the message file before embedding

    -e, --encrypt
        Encrypt the message file before embedding

    -E, --noencrypt
        Do not encrypt the message file before embedding (default)

    -p, --password
        Password to be used for encryption. If this is not provided then
        prompt will be displayed for entry

'extract' options:

    -sf, --stegofile <filename>
        Stego file containing the embedded message

    -xf, --extractfile <filename>
        Optional filename for the extracted data. Use this to override the
        filename embedded in the stego file

    -xd, --extractdir <dir>
        Directory where the message file will be extracted. If this option is
        not provided, then the file is extracted to current directory

    -p, --password
        Password to be used for decryption. If this is not provided then
        prompt will be displayed for entry (if the message is encrypted)

Examples:

  To embed secret.txt into wallpaper.png and generate the output into test.png:

      java -jar <path>\openstego.jar embed -mf secret.txt -cf wallpaper.png \
        -sf test.png
   OR
      java -jar <path>\openstego.jar --embed --messagefile=secret.txt \
        --coverfile=wallpaper.png --stegofile=test.png

  To extract embedded data from test.png to /data directory:

      java -jar <path>\openstego.jar extract -sf test.png -xd /data
   OR
      java -jar <path>\openstego.jar extract --stegofile=test.png \
        --extractdir=/data

  Piping example:

      ls -R | java -jar <path>\openstego.jar embed > test.png

  Wildcard example (Please note that the double quotes are important):

      java -jar <path>\openstego.jar embed -cf "img???.png;wall*.png" \
        -mf watermark.txt

LSB PLUGIN:
-----------
Least Significant Bit (LSB) Plugin for OpenStego.

LSB Plugin specific options for OpenStego:

'embed' options:

    -b, --maxBitsUsedPerChannel <n>
        Max number of bits to use per color channel in the image for embedding
        data. This value can be increased at the expense of image quality, in
        case size of image is not able to accommodate the data (Default = 3)

  It also affects the existing OpenStego options in the following way:

    -cf, --coverfile <filename>
        If this option is not provided or '-' (without quotes) is provided as
        the value then a random image containing noise is generated and used
        as cover file. The size of image is minimum required to embed the
        given source file when 'maxBitsUsedPerChannel' bits are used per color
        channel

    -sf, --stegofile <filename>
        If this option is not provided or '-' (without quotes) is provided as
        the value then stego file is written to stdout in PNG format

Java Advanced Imaging API can be installed to get support for more image
formats (like BMP, etc). It can be downloaded from:  https://jai.dev.java.net

ADDING NEW PLUGIN:
------------------
  To add a new plugin, the following abstract classes must be implemented:

    - net.sourceforge.openstego.OpenStegoPlugin
    - net.sourceforge.openstego.ui.PluginEmbedOptionsUI

  Read the API documentation for the details of the methods to be implemented. In addition, the following utility class
  can be used to handle multilingual string labels for the plugin:

    - net.sourceforge.openstego.util.LabelUtil

  A new namespace should be added to LabelUtil class for each new plugin. Same namespace can also be used for exception
  messages while throwing OpenStegoException.

  After implementing the plugin classes, create new file named "OpenStegoPlugins.external" and put the fully qualified
  name of the class which implements OpenStegoPlugin in the file. Make sure that this file is put directly under the
  CLASSPATH while invoking the application.

  Please refer to the "net.sourceforge.openstego.plugin.lsb" package sources for sample plugin implementation.

TODO:
-----
  - Add support for other algorithms like DCT, FFT, etc.
  - Add support for audio data to be used as cover file

AUTHOR:
-------
  Samir Vaidya (syvaidya@gmail.com)
  Copyright (c) 2007-2008

SEE ALSO:
---------
  http://openstego.sourceforge.net for more details
  http://syvaidya.blogsport.com for my blog

LICENSE:
--------
  GNU General Public License 2.0 (GPL) (see LICENSE file)
