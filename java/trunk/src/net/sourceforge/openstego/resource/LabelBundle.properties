######## Resource bundle for labels to be displayed in OpenStego ########

# Master labels
versionString = OpenStego v0.3.2

# Labels for exceptions
err.invalidHeaderStamp = Wrong Header\: Image does not contain embedded data
err.invalidHeaderVersion = Data was embedded using older version of OpenStego, which is not supported now

err.config.maxBitsUsedPerChannel.notNumber = Invalid value for configuration item ''maxBitsUsedPerChannel''\: {0}
err.config.maxBitsUsedPerChannel.notInRange = Configuration item ''maxBitsUsedPerChannel'' must be between 1 and 8. Value given\: {0}
err.config.useCompression.invalid = Invalid value for configuration item ''useCompression''\: {0}
err.config.useEncryption.invalid = Invalid value for configuration item ''useEncryption''\: {0}
err.config.password.invalid = Invalid password
err.config.invalidKey = Invalid configuration item provided\: {0}

err.image.read = Error reading the image data
err.image.arg.nullValue = Null value provided for image
err.image.insufficientSize = Image size not enough to embed the data
err.image.file.invalid = Invalid or unsupported image file: {0}
err.image.type.invalid = Invalid or unsupported image format: {0}

# Labels for GUI
gui.window.title = OpenStego

gui.button.ok = OK
gui.button.cancel = Cancel

gui.label.sourceDataFile = Source Data File (Message file)
gui.label.sourceImgFile = Source Image File (Cover file)
gui.label.outputImgFile = Output Image File (Stego file)
gui.label.imgForExtractFile = Image File Containing Embedded Data (Stego file)
gui.label.outputDataFolder = Output Folder for Data File (Message file)

gui.label.tab.embed = Embed
gui.label.tab.extract = Extract

gui.label.option.title = Options
gui.label.option.useRandomImage = Use Random Image As Source (Cover file)
gui.label.option.maxBitsPerChannel = Maximum Bits To Use Per Color Channel
gui.label.option.useCompression = Compress Data
gui.label.option.useEncryption = Encrypt Data
gui.label.option.password = Password
gui.label.option.confPassword = Confirm Password

gui.msg.title.success = Success
gui.msg.title.warn = Warning
gui.msg.title.err = Error
gui.msg.title.input = Input
gui.msg.success.embed = Data (Message) embedded successfully into the image (Cover)
gui.msg.success.extract = File (Message) successfully extracted from image (Cover): {0}
gui.msg.warn.fileExists = File {0} already exists. Overwrite?
gui.msg.err.mandatoryCheck = Please provide the value for {0}
gui.msg.err.passwordMismatch = Password does not match the Confirm Password
gui.msg.input.password = Please provide the password

gui.filechooser.title.sourceDataFile = Select Source Data File (Message file)
gui.filechooser.title.sourceImgFile = Select Source Image File (Cover file)
gui.filechooser.title.outputImgFile = Select Output Image File (Stego file)
gui.filechooser.title.imgForExtractFile = Select Image File Containing Embedded Data (Stego file)
gui.filechooser.title.outputDataFolder = Select Output Folder for Data File (Message file)
gui.filechooser.filter.readImgFiles = Cover Image files ({0})
gui.filechooser.filter.writeImgFiles = Stego Image files ({0})


# Labels for command line interface
cmd.usage.main = . Copyright (c) 2007-2008 Samir Vaidya\n\
\n\
For GUI:\n\
\  java -jar <path>{0}openstego.jar\n\
\n\
For command line interface:\n\
\  java -jar <path>{0}openstego.jar <command> [options]\n\
\n\
The first argument must be a command. Valid commands are:\n\
\n\
\  embed, --embed                Embed data into image\n\
\  extract, --extract            Extract data from image\n\
\  readformats --readformats     List down supported formats for cover file\n\
\  writeformats, --writeformats  List down supported formats for stego file\n\
\n\
''embed'' options:\n\
\n\
\    -mf, --messagefile <filename>\n\
\        Source message/data file. If this option is not provided or ''-''\n\
\        (without quotes) is provided as the value then the message data is\n\
\        read from stdin\n\
\n\
\    -cf, --coverfile <filename>\n\
\        Cover file (image in which message will be embedded). If this option is\n\
\        not provided or ''-'' (without quotes) is provided as the value then a\n\
\        random image containing noise is generated and used as cover file. The\n\
\        size of image is minimum required to embed the given source file when\n\
\        ''maxBitsUsedPerChannel'' bits are used per color channel\n\
\n\
\    -sf, --stegofile <filename>\n\
\        Output stego file containing the embedded message. If this option is\n\
\        not provided or ''-'' (without quotes) is provided as the value then\n\
\        stego file is written to stdout with image format as PNG\n\
\n\
\    -b, --maxBitsUsedPerChannel <n>\n\
\        Max number of bits to use per color channel in the image for embedding\n\
\        data. This value can be increased at the expense of image quality, in\n\
\        case size of image is not able to accommodate the data (Default \= {1})\n\
\n\
\    -c, --compress\n\
\        Compress the message file before embedding (default)\n\
\n\
\    -C, --nocompress\n\
\        Do not compress the message file before embedding\n\
\n\
\    -e, --encrypt\n\
\        Encrypt the message file before embedding\n\
\n\
\    -E, --noencrypt\n\
\        Do not encrypt the message file before embedding (default)\n\
\n\
\    -p, --password\n\
\        Password to be used for encryption\n\
\n\
''extract'' options:\n\
\n\
\    -sf, --stegofile <filename>\n\
\        Stego file containing the embedded message\n\
\n\
\    -xf, --extractfile <filename>\n\
\        Optional filename for the extracted data. Use this to override the\n\
\        filename embedded in the stego file\n\
\n\
\    -xd, --extractdir <dir>\n\
\        Directory where the message file will be extracted. If this option is\n\
\        not provided, then the file is extracted to current directory\n\
\n\
\    -p, --password\n\
\        Password to be used for decryption (if the message is encrypted)\n\
\n\
Examples:\n\
\n\
\  To embed secret.txt into wallpaper.png and generate the output into test.png:\n\
\n\
\      java -jar <path>{0}openstego.jar embed -mf secret.txt -cf wallpaper.png \\\n\
\        -sf test.png\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar --embed --messagefile=secret.txt \\\n\
\        --coverfile=wallpaper.png --stegofile=test.png\n\
\n\
\  To extract embedded data from test.png to /data directory:\n\
\n\
\      java -jar <path>{0}openstego.jar extract -sf test.png -xd /data\n\
\   OR\n\
\      java -jar <path>{0}openstego.jar extract --stegofile=test.png \\\n\
\        --extractdir=/data\n\
\n\
\  Piping example:\n\
\n\
\      ls -R | java -jar <path>{0}openstego.jar embed > test.png

cmd.msg.fileExtracted = Extracted file: {0}
